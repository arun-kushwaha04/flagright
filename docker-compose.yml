services:
  db:
    image: postgres
    container_name: postgresdb
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: development
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - flagright_network

  flagright-backend:
    build:
      context: .
      dockerfile: backend.dockerfile
    container_name: flagright-backend
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 5000:5000
      - 5555:5555
    networks:
      - flagright_network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - flagright_network

  flagright-frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    container_name: flagright-frontend
    depends_on:
      - flagright-backend
    ports:
      - 3000:3000
    networks:
      - flagright_network

networks:
  flagright_network:
    driver: bridge

volumes:
  redis_data:
  pgdata:
