generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DB_CONNECTION_URL")
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

enum TransactionState {
  PENDING
  FAILED
  SUCCESS
}

enum UserType {
  ADMIN
  NORMAL
}

enum TransactionType {
  WITHDRAWL
  TRANSFER
  SELFTRANSFER
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  firstName     String
  lastName      String
  password      String
  userType      UserType @default(NORMAL)
  defaultBankId Int

  banks                   UserBank[]
  transactionsOrigin      Transaction[] @relation("origin")
  transactionsDestination Transaction[] @relation("destination")
  defaultBank             Bank          @relation("default bank", fields: [defaultBankId], references: [id])
}

model Bank {
  id       Int      @id @default(autoincrement())
  name     String
  currency Currency

  users                   UserBank[]
  defaultUsers            User[]        @relation("default bank")
  transactionsOrigin      Transaction[] @relation("origin bank")
  transactionsDestination Transaction[] @relation("destination bank")
}

model UserBank {
  userId  Int
  bankId  Int
  balance Float @default(0) 

  user User @relation(fields: [userId], references: [id])
  bank Bank @relation(fields: [bankId], references: [id])

  @@id([userId, bankId])
}

model Transaction {
  id                        Int      @id @default(autoincrement())
  originId                  Int
  destinationId             Int
  originAmount              Float
  originAmountCurrency      Currency
  originBankId              Int
  destinationAmount         Float
  destinationAmountCurrency Currency
  destinationBankId         Int?
  description               String
  type TransactionType
  state TransactionState @default(PENDING)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  origin                    User     @relation("origin", fields: [originId], references: [id])
  destination               User     @relation("destination", fields: [destinationId], references: [id])
  originBank      Bank @relation("origin bank", fields: [originBankId], references: [id])
  destinationBank Bank? @relation("destination bank", fields: [destinationBankId], references: [id])

  @@index([originId])
  @@index([destinationId])
  @@index([createdAt])
}

enum Currency {
  USD
  INR
  RUB
  JPY
  EUR
  CNY
}
